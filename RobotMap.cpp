// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainSpeedControllerRR = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerRL = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerFR = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerFL = NULL;
RobotDrive* RobotMap::driveTrainOmniDrive = NULL;
SpeedController* RobotMap::feederSpeedController = NULL;
DigitalInput* RobotMap::feederLimitSwitch = NULL;
SpeedController* RobotMap::launcherSpeedController = NULL;
Encoder* RobotMap::launcherPositionEncoder = NULL;
PIDController* RobotMap::launcherLauncherPID = NULL;
Compressor* RobotMap::pneumaticMainCompressor = NULL;
Solenoid* RobotMap::feederSolenoidFeederDown = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveTrainSpeedControllerRR = new Talon(1, 3);
	lw->AddActuator("DriveTrain", "SpeedControllerRR", (Talon*) driveTrainSpeedControllerRR);
	
	driveTrainSpeedControllerRL = new Talon(1, 1);
	lw->AddActuator("DriveTrain", "SpeedControllerRL", (Talon*) driveTrainSpeedControllerRL);
	
	driveTrainSpeedControllerFR = new Talon(1, 4);
	lw->AddActuator("DriveTrain", "SpeedControllerFR", (Talon*) driveTrainSpeedControllerFR);
	
	driveTrainSpeedControllerFL = new Talon(1, 2);
	lw->AddActuator("DriveTrain", "SpeedControllerFL", (Talon*) driveTrainSpeedControllerFL);
	
	driveTrainOmniDrive = new RobotDrive(driveTrainSpeedControllerFL, driveTrainSpeedControllerRL,
              driveTrainSpeedControllerFR, driveTrainSpeedControllerRR);
	
	driveTrainOmniDrive->SetSafetyEnabled(false);
        driveTrainOmniDrive->SetExpiration(0.1);
        driveTrainOmniDrive->SetSensitivity(0.5);
        driveTrainOmniDrive->SetMaxOutput(1.0);
	feederSpeedController = new Talon(1, 6);
	lw->AddActuator("Feeder", "SpeedController", (Talon*) feederSpeedController);
	
	feederLimitSwitch = new DigitalInput(1, 2);
	lw->AddSensor("Feeder", "LimitSwitch", feederLimitSwitch);
	
	launcherSpeedController = new Talon(1, 5);
	lw->AddActuator("Launcher", "SpeedController", (Talon*) launcherSpeedController);
	
	launcherPositionEncoder = new Encoder(1, 3, 1, 7, true, Encoder::k4X);
	lw->AddSensor("Launcher", "PositionEncoder", launcherPositionEncoder);
	launcherPositionEncoder->SetDistancePerPulse(1.0);
        launcherPositionEncoder->SetPIDSourceParameter(Encoder::kDistance);
        launcherPositionEncoder->Start();
	launcherLauncherPID = new PIDController(0.015, 0.003, 0.022,/* F: 0.0, */ launcherPositionEncoder, launcherSpeedController, 0.02);
	lw->AddActuator("Launcher", "LauncherPID", launcherLauncherPID);
	launcherLauncherPID->SetContinuous(false); launcherLauncherPID->SetAbsoluteTolerance(20.0); 
        launcherLauncherPID->SetOutputRange(-1.0, 1.0);
	pneumaticMainCompressor = new Compressor(1, 5, 1, 1);
	
	
	feederSolenoidFeederDown = new Solenoid(1, 1);
	lw->AddActuator("FeederSolenoid", "FeederDown", feederSolenoidFeederDown);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
