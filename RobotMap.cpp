// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainSpeedControllerRR = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerRL = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerFR = NULL;
SpeedController* RobotMap::driveTrainSpeedControllerFL = NULL;
RobotDrive* RobotMap::driveTrainOmniDrive = NULL;
SpeedController* RobotMap::feederSpeedController = NULL;
DigitalInput* RobotMap::feederLimitSwitch = NULL;
DigitalInput* RobotMap::launcherLimitSwitchUp = NULL;
SpeedController* RobotMap::launcherSpeedController = NULL;
DigitalInput* RobotMap::launcherLimitSwitchDown = NULL;
AnalogChannel* RobotMap::launcherDistanceSensor = NULL;
Compressor* RobotMap::pneumaticMainCompressor = NULL;
Solenoid* RobotMap::feederSolenoidFeederDown = NULL;
DigitalInput* RobotMap::cameraMoveLeft = NULL;
DigitalInput* RobotMap::cameraMoveRight = NULL;
Servo* RobotMap::cameraCameraServo = NULL;
AnalogChannel* RobotMap::distanceSensorUltrasonicSensor = NULL;
Relay* RobotMap::distanceSensorInRangeLight = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveTrainSpeedControllerRR = new Talon(1, 3);
	lw->AddActuator("DriveTrain", "SpeedControllerRR", (Talon*) driveTrainSpeedControllerRR);
	
	driveTrainSpeedControllerRL = new Talon(1, 1);
	lw->AddActuator("DriveTrain", "SpeedControllerRL", (Talon*) driveTrainSpeedControllerRL);
	
	driveTrainSpeedControllerFR = new Talon(1, 4);
	lw->AddActuator("DriveTrain", "SpeedControllerFR", (Talon*) driveTrainSpeedControllerFR);
	
	driveTrainSpeedControllerFL = new Talon(1, 2);
	lw->AddActuator("DriveTrain", "SpeedControllerFL", (Talon*) driveTrainSpeedControllerFL);
	
	driveTrainOmniDrive = new RobotDrive(driveTrainSpeedControllerFL, driveTrainSpeedControllerRL,
              driveTrainSpeedControllerFR, driveTrainSpeedControllerRR);
	
	driveTrainOmniDrive->SetSafetyEnabled(false);
        driveTrainOmniDrive->SetExpiration(0.1);
        driveTrainOmniDrive->SetSensitivity(0.5);
        driveTrainOmniDrive->SetMaxOutput(1.0);
	feederSpeedController = new Talon(1, 6);
	lw->AddActuator("Feeder", "SpeedController", (Talon*) feederSpeedController);
	
	feederLimitSwitch = new DigitalInput(1, 9);
	lw->AddSensor("Feeder", "LimitSwitch", feederLimitSwitch);
	
	launcherLimitSwitchUp = new DigitalInput(1, 8);
	lw->AddSensor("Launcher", "LimitSwitchUp", launcherLimitSwitchUp);
	
	launcherSpeedController = new Victor(1, 5);
	lw->AddActuator("Launcher", "SpeedController", (Victor*) launcherSpeedController);
	
	launcherLimitSwitchDown = new DigitalInput(1, 7);
	lw->AddSensor("Launcher", "LimitSwitchDown", launcherLimitSwitchDown);
	
	launcherDistanceSensor = new AnalogChannel(1, 1);
	lw->AddSensor("Launcher", "DistanceSensor", launcherDistanceSensor);
	
	pneumaticMainCompressor = new Compressor(1, 5, 1, 1);
	
	
	feederSolenoidFeederDown = new Solenoid(1, 1);
	lw->AddActuator("FeederSolenoid", "FeederDown", feederSolenoidFeederDown);
	
	cameraMoveLeft = new DigitalInput(1, 10);
	lw->AddSensor("Camera", "MoveLeft", cameraMoveLeft);
	
	cameraMoveRight = new DigitalInput(1, 11);
	lw->AddSensor("Camera", "MoveRight", cameraMoveRight);
	
	cameraCameraServo = new Servo(1, 8);
	lw->AddActuator("Camera", "CameraServo", cameraCameraServo);
	
	distanceSensorUltrasonicSensor = new AnalogChannel(1, 2);
	lw->AddSensor("DistanceSensor", "UltrasonicSensor", distanceSensorUltrasonicSensor);
	
	distanceSensorInRangeLight = new Relay(1, 2);
	lw->AddActuator("DistanceSensor", "InRangeLight", distanceSensorInRangeLight);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
