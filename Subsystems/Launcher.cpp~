// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Launcher.h"
#include "../Robotmap.h"
#include "../Commands/LauncherIdleCommand.h"

#define TEST 150

Launcher::Launcher() : Subsystem("Launcher") {
	//Declarations for the speed controller and limit switches for the launcher.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedController = RobotMap::launcherSpeedController;
	positionEncoder = RobotMap::launcherPositionEncoder;
	launcherPID = RobotMap::launcherLauncherPID;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SmartDashboard::PutNumber("Encoder Value:", (double)(positionEncoder->Get()));
	resetEncoder();
	launcherPID->Disable();
}
    
void Launcher::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new LauncherIdleCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Launcher::Reset() {
	launcherPID->Disable();
	//launcherPID->SetSetpoint(0);
	//SmartDashboard::PutBoolean("PID status", launcherPID->IsEnabled());
	//speedController->Set(-1,0);
}
void Launcher::Stop() {
	//speedController->Set(0,0);
}
void Launcher::Launch() {
	//speedController->Set(1,0);
	launcherPID->SetSetpoint(TEST);
	launcherPID->Enable();
	SmartDashboard::PutNumber("Encoder",positionEncoder->Get());
	SmartDashboard::PutNumber("PID setpoint", launcherPID->GetSetpoint());
	SmartDashboard::PutBoolean("PID status", launcherPID->IsEnabled());
}
void Launcher::resetEncoder() {
	positionEncoder->Reset();
	SmartDashboard::PutNumber("Encoder",positionEncoder->Get());
	SmartDashboard::PutBoolean("PID status", launcherPID->IsEnabled());
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
