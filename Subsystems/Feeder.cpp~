// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Feeder.h"
#include "../Robotmap.h"
#include "../Commands/FeederIdleCommand.h"
#define VOLTAGE 0.4
Feeder::Feeder() : Subsystem("Feeder") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedController = RobotMap::feederSpeedController;
	ultrasonicVolts = RobotMap::feederUltrasonicVolts;
	limitSwitch = RobotMap::feederLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Feeder::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new FeederIdleCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Feeder::Forward() {
	if (Robot::launcher->positionEncoder->Get()<=50) {
		speedController->Set(0.5,0);
	}
	Wait(0.005);
}
void Feeder::Stop() {
	speedController->Set(0,0);
	Wait(0.005);
}
void Feeder::Reverse() {
	speedController->Set(-0.5,0);
	Wait(0.005);
}
void Feeder::Passing() {
	if (ultrasonicVolts->GetVoltage() > VOLTAGE) {
		speedController->Set(-0.5,0);
	}
	else {
		speedController->Set(0,0);
	}
	/*SmartDashboard::PutNumber("UltrasonicVoltage", (double)(ultrasonicVolts->GetVoltage()));
	SmartDashboard::PutBoolean("Feeder Limit", limitSwitch->Get());*/
}
double Feeder::GetVoltageConst() {
	return VOLTAGE;
}
