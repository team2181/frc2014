// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "AutonomousLaunchCommand.h"
#include "../Commands/LauncherCycleCommand.h"
#include "../Commands/DriveLeftToTargetCommand.h"
#include "../Commands/DriveRightToTargetCommand.h"
AutonomousLaunchCommand::AutonomousLaunchCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::launcher);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void AutonomousLaunchCommand::Initialize() {
	Command *com = new LauncherCycleCommand();
	Command *drvleft = new DriveLeftToTargetCommand();
	Command *drvright = new DriveRightToTargetCommand();
	
	if (Robot::camera->targetState) {
	switch (Robot::camera->switchPosition()) {
		case 0:
			printf("Switch Determined");
			Wait(0.5);
			com->Start();
			break;
		case 1:
			drvleft->Start();
			Wait(SmartDashboard::GetNumber("Time for left/right"));
			com->Start();
			break;
		case 2:
			drvright->Start();
			Wait(SmartDashboard::GetNumber("Time for left/right"));
			com->Start();
		default:
			break;
	}
	}
	else {
		Wait(2.5);
		com->Start();
	}
}
// Called repeatedly when this Command is scheduled to run
void AutonomousLaunchCommand::Execute() {
	
}
// Make this return true when this Command no longer needs to run execute()
bool AutonomousLaunchCommand::IsFinished() {
	return true;
}
// Called once after isFinished returns true
void AutonomousLaunchCommand::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousLaunchCommand::Interrupted() {
}
